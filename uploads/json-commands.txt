JSON command signature

{"command":"(intended command keyword)", "(command specific parameters)":(parameter value), ..., "type":0, [silent:1]}
type denotes the type of message
0 -> request
2 -> response (used on WIFI communication when replying)
3 -> notify (used on bluetooth communication when replying)

silent supresses buzzer sound when receiving command, this parameter is optional
0 -> not silent, same as not using the parameter
1 -> silent

JSON reply signature

{"command":"(received command keyword)", "(command specific parameters)":(parameter value), ..., "type":(2 or 3), "valve_id":"AABBCCDDEEFFGG"}
valve_id -> unique ID of the valve that replied the command



Commands:

get_unique_id: returns device unique ID

	command parameters:
		none

	reply parameters:
		"UUID":string

	command example: {"command":"get_unique_id","type":0}
	reply example: {"command":"get_unique_id","type":2,"UUID":"30AEA40322FC","valve_id":"30AEA40322FC"}

set_valve: sets valve name and location

	command parameters:
		"name":string
		"location":string

	reply parameters:
		none

	command example: {"command":"set_valve","name":"abc@abc.com", "location": "mbl29kv73na", "type":0}
	reply example: {"command":"set_valve","name":"abc@abc.com","location":"mbl29kv73na","type":2,"successful":1,"valve_id":"30AEA40322FC"}

get_valve: retrieves valve previously set name and location and also sensor values, connected wifi SSID, motor state and firmware version

	command parameters:
		none

	reply parameters:
		"name": string
		"location": string
		"SSID": string
		"temperature": number
		"battery": number
		"probe": boolean
		"state": string
		"version": string

	command example: { "command":"get_valve", "type": 0, "silent": 1 }
	reply example: {"command":"get_valve","type":2,"silent":1,"name":"abc@abc.com","location":"mbl29kv73na","SSID":"ZWAVE","temperature":83.022995,"battery":198,"probe":true,"state":"open","version":"3.0.0","valve_id":"30AEA40322FC"}

DEBUG_factory_reset: Erases all user related memory and resets the system

	command parameters:
		none

	reply parameters:
		none

	command example: {"command":"DEBUG_factory_reset","type":0}
	reply example: -sends no reply for this command-

DEBUG_start_factory_test: Starts factory test mode

	command parameters:
		none

	reply parameters:
		none

	command example: {"command":"DEBUG_start_factory_test","type":0}
	reply example: -sends no reply for this command-

register_mode: Sets register mode for Guardian Water Detectors

	command parameters:
		"mode":number
			0 -> not registering, normal operation
			5 -> register from first received Guardian Water Detector signal
			6 -> register from all received Guardian Water Detector signals
			7 -> register from received Guardian Water Detector signal if the PIN number matches the PIN parameter given
			8 -> register Guardian Water Detector directly by using the Unique Device Id given
			15-> unregister first received Guardian Water Detector signal
			16-> unregister all received Guardian Water Detector signals
			17-> unregister received Guardian Water Detector signal if the PIN number matches the PIN parameter given
			18-> unregister Guardian Water Detector directly by using the Unique Device Id given
		"PIN":string
		The four characters PIN printed on the label under the product.(if adding or removing by the entire ID, option 8 or 18, this parameter is still used despite carrying the Unique ID)

	reply parameters:
		"UUID":string
		contains the twelve characters representing the Unique ID(DEVICE ID) that is also printed on the product label

	command example: {"command":"register_mode", "mode":7, "PIN":"D0DD","type":0}
	reply example: {"command":"register_mode","mode":7,"PIN":"D0DD","type":2,"UUID":"D88039D5D0DD","valve_id":"30AEA40322FC"}

get_sensor: Gets information about a registered sensor.

	command parameters:
		"UUID":string
		contains the twelve characters representing the Unique ID(DEVICE ID) that is also printed on the product label

	reply parameters:
		"UUID":string
		contains the twelve characters representing the Unique ID(DEVICE ID) that is also printed on the product label
		"battery": number
		"temperature": number
		"tilt": boolean
		last registered state of the tilt sensor
		"top": boolean
		last registered state of the top water sensor
		"bottom": boolean
		last registered state of the bottom water sensor


	command example: {"command":"get_sensor", "UUID":"D88039D5D0DD","type":0}
	reply example: {"command":"get_sensor","UUID":"D88039D5D0DD","type":2,"UUID":"D88039D5D0DD","battery":100,"temperature":69.603439,"tilt":false,"top":true,"bottom":true,"valve_id":"30AEA40322FC"}

get_sensor_list: Gets information of all registered sensors in a list.

	command parameters:
		none

	reply parameters:
		"sensors": JSON object array
		the parameters inside each object are the same as the ones described in the "get_sensor" command

	command example: {"command":"get_sensor_list", "type":0}
	reply example:
	{"command":"get_sensor_list","type":2,
		"sensors":[
			{"UUID":"D88039D5D0DD","battery":100,"temperature":69.603439,"tilt":false,"top":true,"bottom":true},
			{"UUID":"5410EC689B8C","battery":100,"temperature":67.863014,"tilt":false,"top":true,"bottom":true},
			{"UUID":"5410EC687BBA","battery":83.542717,"temperature":65.489716,"tilt":false,"top":true,"bottom":true},
			{"UUID":"5410EC68A3E2","battery":100,"temperature":68.812340,"tilt":false,"top":true,"bottom":true},
			{"UUID":"5410EC686808","battery":100,"temperature":69.761658,"tilt":false,"top":true,"bottom":true}
		],"valve_id":"30AEA40322FC"
	}

update_esp32: updates valve ESP32 firmware update with given file, this command causes the valve to reboot and reply is sent to cloud instead of the command sender.

	command parameters:
		"address": string
		HTTP server IP address to connect.
		"port": string'
		HTTP server IP port.
		"filename": string
		file path on the server.

	acknowledge parameters:
		none

	reply parameters:
		"error": number
		0 the update was successful, 1 update failed.

	command example: {"command":"update_esp32", "address":"104.236.34.184", "port":"80", "filename":"/G/esp_beta.bin", "type":0}
	acknowledge example: {"command":"update_esp32","address":"104.236.34.184","port":"80","filename":"/G/esp_beta.bin","type":2,"valve_id":"30AEA402FEB8"}
	reply example: {"command":"update_esp32","type":2,"error":1,"valve_id":"30AEA402FEB8"}

update_lora: update valve st firmware with given file, this command causes the valve to reboot and reply is sent to cloud instead of the command sender.

	command parameters:
		"address": string
		HTTP server IP address to connect.
		"port": string'
		HTTP server IP port.
		"filename": string
		file path on the server.

	acknowledge parameters:
		"error": number
		1 update failed. present only if update failed.

	reply parameters:
		"error": number
		0 the update was successful, 1 update failed.

	command example: {"command":"update_lora", "address":"10.6.24.184", "port":"80", "filename":"/G/st_beta.bin", "type":0}
	acknowledge example: {"command":"update_lora","address":"10.6.24.184","port":"80","filename":"/G/st_beta.bin","type":2,"error":1,"valve_id":"30AEA402FEB8"}
	reply example: {"command":"update_lora","type":2,"error":0,"valve_id":"30AEA402FEB8"}


motor_action: opens or closes the valve motor. This command has two replies, one acknowledge when the command is received and the motor process is started and another when the motor is finished.

	command parameters:
		"action": string
		The strings used to determine the motor action are "close" and "open".

	acknowledge parameters:
		"error": string
		Indicates if the command was invalid (trying to open when the valve is already open) otherside it isn't present

	reply parameters:
		"successful": number
		0 if the motor stalled and stopped outside the calibration window, otherwise if successful the value is 1

	command example: {"command":"motor_action", "action":"close", "type":0}
	acknowledge example: {"command":"motor_action","action":"close","type":2,"valve_id":"30AEA40322FC"}
	reply example: {"command":"motor_action","action":"close","type":2,"state":"closed","successful":1,"valve_id":"30AEA40322FC"}

motor_state: gets the current motor state, if open, closed or stalled.

	command parameters:
		none

	reply parameters:
		"state": string
		states the current motor state:
			"open", "opening", "openError", "closed", "closing", "closeError"

	command example: {"command":"motor_state","type":0}
	reply example: {"command":"motor_state","type":2,"state":"closed","valve_id":"30AEA402FEB8"}

motor_calibration: calibrates motor opening or closing time.

	command parameters:
		"action": string
		The strings used to determine the motor action are "close" and "open".

	acknowledge parameters:
		"error": string
		Indicates if the command was invalid:
			"Already calibrating!" calibration is underway.
			"Command not accepted!" invalid calibration direction.

	reply parameters:
		"time": number
		time the motor took to complete the action.

	command example: {"command":"motor_calibration", "action":"open","type":0}
	reply example: {"command":"motor_calibration","action":"open","type":2,"time":6263,"valve_id":"30AEA402FEB8"}

get_WIFI_list: gets a list of the WiFi APs currently in range of the valve

	command parameters:
		none

	reply parameters:
		"WifiList": array of of the following objects ->{	"SSID": string, "Strength": number, Crypto: number	}
			"SSID" is the name of the WiFi AP
			"Strength" is the signal quality, the array is ordered by this parameter
			"Crypto" is the type of cryptography used by the AP(0-open, 1-WEP, 2-WPA_PSK, 3-WPA2_PSK, 4-WPA_WPA2_PSK, 5-WPA2_ENTERPRISE)

	command example:
	reply example:
		{
			"command": "get_WIFI_list",
			"type": 2,
			"WifiList": [
				{
					"SSID": "vmTYKthsUKtzdBb78cNTH94sNbaspX",
					"Strength": -24,
					"Crypto": 3
				},
				{
					"SSID": "Guardian_TEST",
					"Strength": -26,
					"Crypto": 3
				},
				{
					"SSID": "Flex - Smart Home",
					"Strength": -75,
					"Crypto": 3
				},
				{
					"SSID": "Gustavo",
					"Strength": -84,
					"Crypto": 4
				},
				{
					"SSID": "2.4_netvirtua_ap20",
					"Strength": -86,
					"Crypto": 3
				},
				{
					"SSID": "condominio",
					"Strength": -86,
					"Crypto": 4
				},
				{
					"SSID": "Pedro",
					"Strength": -88,
					"Crypto": 4
				},
				{
					"SSID": "#NET-CLARO-WIFI",
					"Strength": -88,
					"Crypto": 0
				},
				{
					"SSID": "SBPEPC 2.4",
					"Strength": -88,
					"Crypto": 4
				},
				{
					"SSID": "PALESTRA2",
					"Strength": -89,
					"Crypto": 4
				},
				{
					"SSID": "2.4G_Day95",
					"Strength": -91,
					"Crypto": 4
				},
				{
					"SSID": "Danish",
					"Strength": -91,
					"Crypto": 4
				}
			],
			"valve_id": "30AEA402FEB8"
		}

set_WIFI_station: sets an AP for the valve to connect

	command parameters:
		"SSID": string
		ssid of the WiFi AP the valve will connect to.
		"PASS": string
		password of the WiFi AP the valve will connect to.
		"connect": number
		0 valve connects only on next bootup, 1 valve will try connecting immediately and it will drop the current WiFi connection if it is connected

	reply parameters:
		none

	command example: {"command":"set_WIFI_station","type":0,"SSID":"Guardian_TEST","PASS":"naoteinteressaowpalhaco", "connect":1}
	reply example: {"command":"set_WIFI_station","type":2,"SSID":"Guardian_TEST","PASS":"naoteinteressaowpalhaco","connect":1,"valve_id":"30AEA402FEB8"}

get_WIFI_station: gets the current WiFi connection status

	command parameters:
		none

	reply parameters:
		"SSID": string
		ssid of the WiFi AP the valve is currently connected to.
		"Strength": number
		strength of the WiFi AP the valve is currently connected to.
		"IP": string
		IP of the valve on its currently connected network.

	command example: {"command":"get_WIFI_station","type":0,"connect":1}
	reply example: {"command":"get_WIFI_station","type":2,"connect":1,"SSID":"Guardian_TEST","Strength":-17,"Crypto":3,"IP":"192.168.50.101","valve_id":"30AEA402FEB8"}

set_WIFI_ap: Turns on/off the valve AP, this command causes the valve to reboot after the acknowledge.

	command parameters:
		none

	reply parameters:
		option: Number
		0 turns off valve AP, 1 turns on AP.

	command example: {"command":"set_WIFI_ap", "option":0 ,"type":0}
	reply example: {"command":"set_WIFI_ap","option":0,"type":2,"valve_id":"30AEA402FEB8"}
